generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Movie {
  id            String    @id @default(uuid())
  title         String
  overview      String
  releaseDateAt DateTime?
  adult         Boolean?  @default(false)

  geners Genre[] @ignore

  file   File?   @relation(fields: [fileId], references: [id])
  fileId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TvShow {
  id             String    @id @default(uuid())
  name           String
  overview       String
  adult          Boolean
  firstAirDateAt DateTime?
  lastAirDateAt  DateTime?

  season Season[]

  geners Genre[] @ignore

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Season {
  id           String    @id @default(uuid())
  name         String
  overview     String
  seasonNumber Int
  airDateAt    DateTime?

  episodes Episode[]

  tvShow   TvShow? @relation(fields: [tvShowId], references: [id])
  tvShowId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([seasonNumber])
}

model Episode {
  id            String    @id @default(uuid())
  name          String
  overview      String
  episodeNumber Int
  airDateAt     DateTime?

  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String?

  file   File   @relation(fields: [fileId], references: [id])
  fileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([episodeNumber])
}

model File {
  id       String @id @default(uuid())
  name     String
  path     String
  mimetype String

  episode Episode[]
  user    User[]
  movie   Movie[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String @id @default(uuid())
  name         String
  email        String @unique
  passwordHash String

  avatar File   @relation(fields: [fileId], references: [id])
  fileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id   String @id @default(uuid())
  name String

  tvShow   TvShow? @relation(fields: [tvShowId], references: [id])
  tvShowId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Movie     Movie?   @relation(fields: [movieId], references: [id])
  movieId   String?
}

// TODO: ADD ROLE WITH POSTGRESS
// enum Role {
//   USER
//   ADMIN
// }
